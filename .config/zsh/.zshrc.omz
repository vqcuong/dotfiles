#!/bin/zsh

function _init_powerlevel10k_instant (){
  () { [[ -r $1 ]] && source $1 } "${XDG_CACHE_HOME-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
}

_init_powerlevel10k_instant

function _setup_powerlevel10k() {
  [[ -d $1 ]] || git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $1
  source $1/powerlevel10k.zsh-theme
}

function _enable_powerlevel10k(){
  # To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh
  [[ ! -f ${ZDOTDIR-$HOME}/.p10k.zsh ]] || source ${ZDOTDIR-$HOME}/.p10k.zsh
  typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
  typeset -g POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='k|kubectl|helm|kubens|kubectx|oc|istioctl|kogito|k9s|helmfile|flux|fluxctl|stern|kubeseal|skaffold|kubent|kubecolor|cmctl|sparkctl'
}

function _eval_miniforge (){
  conda_prefix=$1
  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$("${conda_prefix}/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "${conda_prefix}/etc/profile.d/conda.sh" ]; then
          . "${conda_prefix}/etc/profile.d/conda.sh"
      else
          export PATH="${conda_prefix}/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<
}

function _setup_miniforge(){
  conda_prefix=${1-"${HOME}/.apps/miniforge3"}
  if [[ -d $conda_prefix ]]; then
    _eval_miniforge $conda_prefix
  fi
  if ! command -v conda &>/dev/null; then
    rm -rf $conda_prefix
    os_name=$(uname -s)
    os_arch=$(uname -m)
    tag_name=$(http https://api.github.com/repos/conda-forge/miniforge/releases/latest | jq -r '.tag_name')
    http -d https://github.com/conda-forge/miniforge/releases/download/${tag_name}/Miniforge3-${os_name}-${os_arch}.sh -o /tmp/miniforge3.sh
    bash /tmp/miniforge3.sh -b -p $conda_prefix
    _eval_miniforge $conda_prefix
  fi
}

function _setup_goenv(){
  export GOENV_ROOT="$HOME/.apps/goenv"
  export GOENV_GOPATH_PREFIX="$HOME/.apps/go"
  export GOENV_GOMOD_VERSION_ENABLE=1
  export PATH="$GOENV_ROOT/bin:$PATH"
  if ! command -v goenv &>/dev/null; then
    mkdir -p $(dirname $GOENV_ROOT)
    git clone https://github.com/go-nv/goenv.git $GOENV_ROOT
  fi
  eval "$(goenv init -)"
  export PATH="$GOENV_ROOT/shims:$PATH"
}

function _setup_pyenv() {
  export PYENV_ROOT="$HOME/.apps/pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  if ! command -v pyenv &>/dev/null; then
    mkdir -p $(dirname $PYENV_ROOT)
    curl https://pyenv.run | bash
    # git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT
  fi
  eval "$(pyenv init -)"
}


function _setup_nvm() {
  export NVM_DIR="$HOME/.apps/nvm"
  # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
  [ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"
  [ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && . "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm"

}

export PATH="$HOME/.local/bin:/usr/local/bin:$PATH"
export XDG_CONFIG_HOME="$HOME/.config"
export ZLE_RPROMPT_INDENT=0

# disable this to remove the slow motion when pasting text in terminal
# this feature is attached with oh-my-zsh
DISABLE_MAGIC_FUNCTIONS=true

# enable autocomplete for homebrew and its apps
# remember to add this before sourcing oh-my-zsh
eval $(/opt/homebrew/bin/brew shellenv)

# Git installed through homebrew also installed the completion, which is a simple port of its bash completion,
# which then overrides zsh's own much more sophisticated git completion
# rm -f $HOMEBREW_PREFIX/share/zsh/site-functions/_git
# Homebrew autocompletion is really slow so don't use it
# rm -f $HOMEBREW_PREFIX/share/zsh/site-functions/_brew
FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

export ZSH="$ZDOTDIR/ohmyzsh"

plugins=(
  aliases
  auto-ls
  autoenv
  # aws
  # conda-zsh-completion
  copybuffer
  docker-compose
  forgit
  fzf-tab
  git
  git-open
  golang
  # hacker-quotes
  history
  httpie
  kubectl
  python
  sudo
  # terraform
  fast-syntax-highlighting
  you-should-use
  zsh-autosuggestions
  # zsh-autocomplete
  # zsh-abbr
  zsh-ssh
)

source $ZSH/oh-my-zsh.sh

# ohmyzsh plugins customization

# autoenv
export AUTOENV_IN_FILE=.env

# forgit
export FORGIT_NO_ALIASES=true

# you-should-use
export YSU_MESSAGE_FORMAT="$(tput setaf 5)ðŸ’¡ %alias => %command$(tput sgr0)"
export YSU_MESSAGE_POSITION="after"

# zsh-autosuggestions
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
export ZSH_AUTOSUGGEST_MANUAL_REBIND=true
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
unset ZSH_AUTOSUGGEST_USE_ASYNC

# fzf-tab
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':fzf-tab:complete:cd:*' continuous-trigger '/'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls -1 $realpath'
zstyle ':fzf-tab:complete:z:*' fzf-preview 'ls -1 $realpath'
zstyle ':fzf-tab:complete:nvim:*' fzf-preview 'if [ -d $realpath ]; then ls -1 $realpath; else less ${(Q)realpath}; fi'
zstyle ':fzf-tab:complete:vim:*' fzf-preview 'if [ -d $realpath ]; then ls -1 $realpath; else less ${(Q)realpath}; fi'
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
zstyle ':fzf-tab:*' popup-min-size 60 15
zstyle ':fzf-tab:*' popup-pad 0 0



_setup_miniforge
_setup_pyenv
_setup_goenv
_setup_nvm

# User configuration

# eval "$(thefuck --alias)"
eval "$(zoxide init zsh)"

# source $HOMEBREW_CELLAR/azure-cli/*/etc/bash_completion.d/az

# enable fzf
# [ -f ${ZDOTDIR-$HOME}/.fzf.zsh ] && source ${ZDOTDIR-$HOME}/.fzf.zsh
source <(fzf --zsh)
export FZF_DEFAULT_OPTS=" \
  --color=spinner:#f5e0dc,hl:#ff69a5 \
  --color=fg:#def58c,header:#ff69a5,info:#b638ff,pointer:#f5e0dc \
  --color=marker:#f5e0dc,fg+:#00ff91,prompt:#b638ff,hl+:#ff69a5"

# additional zsh site-functions
[[ -d ${ZDOTDIR-$HOME}/.site-functions ]] && for f in ${ZDOTDIR-$HOME}/.site-functions/*; do
  source $f
done

# source any local config
[[ -f $HOME/.zshrc.local ]] && source $HOME/.zshrc.local
if [[ -d $ZDOTDIR/.local ]]; then
  for f in $ZDOTDIR/.local/*; do
    source $f
  done
fi

# # chilly quote on startup
# fortune|cowsay|lolcat

# # os info
# pfetch

# powerlevel10k
_setup_powerlevel10k "${ZDOTDIR-$HOME}/.powerlevel10k"
_enable_powerlevel10k

# pnpm
export PNPM_HOME="/Users/cuongok/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# bun completions
[ -s "/Users/cuongok/.bun/_bun" ] && source "/Users/cuongok/.bun/_bun"
